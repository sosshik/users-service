basePath: /
definitions:
  dtos.CreateUserRequest:
    properties:
      country:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      password:
        type: string
    type: object
  dtos.CreateUserResponse:
    properties:
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      updated_at:
        type: string
    type: object
  dtos.GetUserDTO:
    properties:
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      updated_at:
        type: string
    type: object
  dtos.GetUserResponse:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/dtos.GetUserDTO'
        type: array
    type: object
  dtos.UpdateUserRequest:
    properties:
      country:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
    type: object
  dtos.UpdateUserResponse:
    properties:
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8090
info:
  contact: {}
  description: This is a sample service for managing users.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Users Service API
  version: "1.0"
paths:
  /users:
    get:
      description: 'Retrieve a list of users with optional filtering and pagination.
        Filter must look like this and be URL encoded: field=value'
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      - description: Page size
        in: query
        name: page_size
        type: string
      - description: Filter query
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetUserResponse'
        "500":
          description: Unable to get users
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a list of users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the given details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CreateUserResponse'
        "422":
          description: Invalid request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Unable to create user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete the user with the given ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Unable to delete user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the user with the given ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UpdateUserResponse'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Unable to update user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing user
      tags:
      - users
swagger: "2.0"
